use criterion::Criterion;
use lineas::Matrix;

pub fn mult_square_2() {
	let lhs = Matrix::new([[-9615, 5479], [-10112, -31861]]);
	let rhs = Matrix::new([[16886, 7468], [-29432, -9379]]);
	let res = Matrix::new([[-323616818, -123192361], [766981720, 223307903]]);
	assert_eq!(lhs * rhs, res)

}

pub fn mult_square_3() {
	let lhs = Matrix::new([[-13592, -24560, -16525], [-3849, 24166, -7216], [16306, -15874, 9017]]);
	let rhs = Matrix::new([[9563, -834, 1408], [8433, -26036, 14671], [5510, 27474, -6515]]);
	let res = Matrix::new([[-428147526, 196772038, -271796921], [127223731, -824228294, 396132234], [71752506, 647429318, -268674361]]);
	assert_eq!(lhs * rhs, res)
}

pub fn mult_square_4() {
        let lhs = Matrix::new([[-19946, 12239, -15662, 19915], [-29783, -894, 5400, 10178], [-13931, -20890, -7504, 14436], [-14558, 30861, -12936, -21494]]);
        let rhs = Matrix::new([[-5260, -12735, 15811, 31657], [20942, 17474, 26850, -30957], [-2009, -18866, 16147, 19827], [-22334, -26321, 7674, -2745]]);
        let res = Matrix::new([[-52091554, 239173173, -86815660, -1375510394], [-100227620, -6106789, -329603141, -836037683], [-671539408, -426020067, -791544765, 17269435], [1228901562, 1534455394, 224618764, -1613707625]]);
        assert_eq!(lhs * rhs, res)
}

pub fn mult_square_5() {
	let lhs = Matrix::new([[2971, -32289, 10151, 8155, 706], [13098, 30911, 15962, 30572, 30309], [16147, -10514, -23668, -4534, 6165], [28901, -28723, 16927, 4238, 22329], [-18529, -31237, -1460, -12121, 13804]]);
	let rhs = Matrix::new([[-19603, 23446, -24568, -4337, -31991], [1025, 31677, 5720, 29902, -16427], [22184, 29069, -3650, -18978, 10962], [-13362, -12768, 6417, 4296, -2300], [10056, -24930, 16258, -3608, 11003]]);
	let res = Matrix::new([[31985472, -779804788, -230926975, -1138549951, 535653022], [25308929, 604316167, 485702202, 586550300, -488643344], [-729778855, -738277846, -299315484, 23030753, -525032120], [-52566542, -350967416, -545898750, -1367815973, -31246809], [599591248, -1655738915, 428518807, -927857269, 1269650630]]);
	assert_eq!(lhs * rhs, res)
}

pub fn mult_square_6() {
        let lhs = Matrix::new([[-100i16, 24, -91, 2, -81, 56], [67, 4, 78, -58, -36, -48], [-87, 36, -43, -21, 66, -63], [46, 22, -84, -123, 6, -41], [-38, -128, 81, -86, 5, -77], [-32, 17, -70, -17, 97, -38]]);
        let rhs = Matrix::new([[47, -29, 46, 52, -84, -6], [-19, 108, -100, 115, 47, -99], [-40, 23, 74, 37, -114, 20], [78, 19, 9, 108, -95, -7], [13, -51, 98, -23, 63, 33], [89, -47, 59, 65, 68, 32]]);
        let res = Matrix::new([[2571, 4936, -18350, -88, 18417, -4491], [-9311, 3273, 1572, -1726, -14354, -1556], [-9440, 4618, -8222, -9856, 15771, -3593], [-8061, -1606, -9238, -14273, 16021, -4387], [-16090, -9129, 12219, -28107, -8809, 12823], [-2474, -2330, -1241, -8836, 16609, -787]]);
        assert_eq!(lhs * rhs, res)
}

pub fn mult_square_6_i32() {
        let lhs = Matrix::new([[-100i32, 24, -91, 2, -81, 56], [67, 4, 78, -58, -36, -48], [-87, 36, -43, -21, 66, -63], [46, 22, -84, -123, 6, -41], [-38, -128, 81, -86, 5, -77], [-32, 17, -70, -17, 97, -38]]);
        let rhs = Matrix::new([[47, -29, 46, 52, -84, -6], [-19, 108, -100, 115, 47, -99], [-40, 23, 74, 37, -114, 20], [78, 19, 9, 108, -95, -7], [13, -51, 98, -23, 63, 33], [89, -47, 59, 65, 68, 32]]);
        let res = Matrix::new([[2571, 4936, -18350, -88, 18417, -4491], [-9311, 3273, 1572, -1726, -14354, -1556], [-9440, 4618, -8222, -9856, 15771, -3593], [-8061, -1606, -9238, -14273, 16021, -4387], [-16090, -9129, 12219, -28107, -8809, 12823], [-2474, -2330, -1241, -8836, 16609, -787]]);
        assert_eq!(lhs * rhs, res)
}

pub fn mult_square_6_i64() {
        let lhs = Matrix::new([[-100i64, 24, -91, 2, -81, 56], [67, 4, 78, -58, -36, -48], [-87, 36, -43, -21, 66, -63], [46, 22, -84, -123, 6, -41], [-38, -128, 81, -86, 5, -77], [-32, 17, -70, -17, 97, -38]]);
        let rhs = Matrix::new([[47, -29, 46, 52, -84, -6], [-19, 108, -100, 115, 47, -99], [-40, 23, 74, 37, -114, 20], [78, 19, 9, 108, -95, -7], [13, -51, 98, -23, 63, 33], [89, -47, 59, 65, 68, 32]]);
        let res = Matrix::new([[2571, 4936, -18350, -88, 18417, -4491], [-9311, 3273, 1572, -1726, -14354, -1556], [-9440, 4618, -8222, -9856, 15771, -3593], [-8061, -1606, -9238, -14273, 16021, -4387], [-16090, -9129, 12219, -28107, -8809, 12823], [-2474, -2330, -1241, -8836, 16609, -787]]);
        assert_eq!(lhs * rhs, res)
}


pub fn main(c: &mut Criterion) {
	c.bench_function("Mult square 2x2", |b| b.iter(|| mult_square_2()));
	c.bench_function("Mult square 3x3", |b| b.iter(|| mult_square_3()));
	c.bench_function("Mult square 4x4", |b| b.iter(|| mult_square_4()));
	c.bench_function("Mult square 5x5", |b| b.iter(|| mult_square_5()));
	c.bench_function("Mult square 6x6", |b| b.iter(|| mult_square_6()));
	
	let mut group = c.benchmark_group("Mult square 6x6 different types");
    group.bench_function("Mult square 6x6 (i16)", |b| b.iter(|| mult_square_6()));
    group.bench_function("Mult square 6x6 (i32)", |b| b.iter(|| mult_square_6_i32()));
    group.bench_function("Mult square 6x6 (i64)", |b| b.iter(|| mult_square_6_i64()));
    group.finish();
}
